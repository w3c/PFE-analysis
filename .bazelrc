build --cxxopt='-std=c++17'

# Address sanitizer
# To use it:
# bazel build --config asan
#
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -O2
build:asan --copt -g
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address

test:asan --strip=never
test:asan --copt -fsanitize=address
test:asan --copt -DADDRESS_SANITIZER
test:asan --copt -O2
test:asan --copt -g
test:asan --copt -fno-omit-frame-pointer
test:asan --linkopt -fsanitize=address

test:ubsan --strip=never
test:ubsan --copt -fsanitize=undefined
test:ubsan --copt -DADDRESS_SANITIZER
test:ubsan --copt -O2
test:ubsan --copt -g
test:ubsan --copt -fno-omit-frame-pointer
test:ubsan --linkopt -fsanitize=undefined

test:msan --strip=never
test:msan --copt -fsanitize=memory
test:msan --copt -DADDRESS_SANITIZER
test:msan --copt -O2
test:msan --copt -g
test:msan --copt -fno-omit-frame-pointer
test:msan --linkopt -fsanitize=memory

##### WASM #####
# Use our custom-configured c++ toolchain.
build:wasm --crosstool_top=//js_client/toolchain:emscripten

# Use --cpu as a differentiator.
build:wasm --cpu=wasm

# Use the default C++ toolchain to build the tools used during the build.
build:wasm --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

# These compile flags are active no matter which build mode we are in
# (dbg vs opt). For flags specific to build mode, see cc_toolchain_config.bzl.
build:wasm --cxxopt="-flto"
build:wasm --host_cxxopt="-fno-exceptions"
build:wasm --host_cxxopt="-fomit-frame-pointer"

# Disable sandbox environment because emsdk caches files by writing to
# home directory.
build:wasm --spawn_strategy=local

